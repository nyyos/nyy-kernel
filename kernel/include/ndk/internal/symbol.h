#pragma once

#include <stdint.h>
#include <stddef.h>
#include <sys/queue.h>

typedef struct symbol {
	const char *symname;
	uintptr_t base;

	TAILQ_ENTRY(symbol) entry;
} symbol_t;

/**
 * @brief init symbol subsystem, requires kmem 
 *
 * @param offset The kernel offset if KASLR is employed
 */
void symbols_init(size_t offset);
/**
 * @brief get kernel offset
 *
 * @return the offset provided to symbols_init
 */
size_t symbols_offset();
/**
 * @brief inserts a symbol into the list of kernel symbols
 *
 * @param name The symbol name. This has to be an address that never gets deallocated.
 * @param address The symbol's base address
 */
void symbols_insert(const char *name, uintptr_t address);

/**
 * @brief lookup by address
 *
 * @param address The address, doesn't have to be exact
 * @return The next-lowest symbol
 */
symbol_t *symbols_lookup_address(uintptr_t address);
/**
 * @brief lookup by symbol name
 *
 * @param name The symbol name to search for
 * @return The symbol
 */
symbol_t *symbols_lookup_name([[gnu::nonnull]] const char *name);
/*
* parses map generated by nm, inserts then all symbols
* format: addr type name
* e.g. ffffffff800039f8 t smp_entry 
*
* @param buf The textual map in memory
* @param size The buffer size
*/
void symbols_parse_map(char *buf, size_t size);
